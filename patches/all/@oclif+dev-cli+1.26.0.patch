diff --git a/node_modules/@oclif/dev-cli/lib/commands/pack/macos.js b/node_modules/@oclif/dev-cli/lib/commands/pack/macos.js
index e0abbbe..e130966 100644
--- a/node_modules/@oclif/dev-cli/lib/commands/pack/macos.js
+++ b/node_modules/@oclif/dev-cli/lib/commands/pack/macos.js
@@ -128,6 +128,7 @@ class PackMacos extends command_1.Command {
         if (process.env.OSX_KEYCHAIN)
             args.push('--keychain', process.env.OSX_KEYCHAIN);
         args.push(dist);
+        console.error(`[debug] pkgbuild "${args.join('" "')}"`);
         await qq.x('pkgbuild', args);
     }
 }
diff --git a/node_modules/@oclif/dev-cli/lib/commands/pack/win.js b/node_modules/@oclif/dev-cli/lib/commands/pack/win.js
index a313991..122560b 100644
--- a/node_modules/@oclif/dev-cli/lib/commands/pack/win.js
+++ b/node_modules/@oclif/dev-cli/lib/commands/pack/win.js
@@ -51,6 +51,13 @@ VIAddVersionKey /LANG=\${LANG_ENGLISH} "ProductVersion" "\${VERSION}.0"
 InstallDir "\$PROGRAMFILES${arch === 'x64' ? '64' : ''}\\${config.dirname}"
 
 Section "${config.name} CLI \${VERSION}"
+  ; First remove any old client files.
+  ; (Remnants of old versions were causing CLI errors)
+  ; Initially tried running the Uninstall.exe, but was
+  ; unable to make script wait for completion (despite using _?)
+  DetailPrint "Removing files from previous version."
+  RMDir /r "$INSTDIR\\client"
+
   SetOutPath $INSTDIR
   File /r bin
   File /r client
@@ -192,7 +199,8 @@ class PackWin extends command_1.Command {
     async run() {
         await this.checkForNSIS();
         const { flags } = this.parse(PackWin);
-        const buildConfig = await Tarballs.buildConfig(flags.root);
+        const targets = flags.targets ? flags.targets.split(',') : undefined;
+        const buildConfig = await Tarballs.buildConfig(flags.root, { targets });
         const { config } = buildConfig;
         await Tarballs.build(buildConfig, { platform: 'win32', pack: false });
         const arches = buildConfig.targets.filter(t => t.platform === 'win32').map(t => t.arch);
@@ -207,7 +215,8 @@ class PackWin extends command_1.Command {
             // eslint-disable-next-line no-await-in-loop
             await qq.mv(buildConfig.workspace({ platform: 'win32', arch }), [installerBase, 'client']);
             // eslint-disable-next-line no-await-in-loop
-            await qq.x(`makensis ${installerBase}/${config.bin}.nsi | grep -v "\\[compress\\]" | grep -v "^File: Descending to"`);
+            const { fixPath } = require("../../util");
+            await qq.x(`makensis ${fixPath(installerBase)}/${config.bin}.nsi | grep -v "\\[compress\\]" | grep -v "^File: Descending to"`)
             const o = buildConfig.dist(`win/${config.bin}-v${buildConfig.version}-${arch}.exe`);
             // eslint-disable-next-line no-await-in-loop
             await qq.mv([installerBase, 'installer.exe'], o);
@@ -232,4 +241,5 @@ exports.default = PackWin;
 PackWin.description = 'create windows installer from oclif CLI';
 PackWin.flags = {
     root: command_1.flags.string({ char: 'r', description: 'path to oclif CLI root', default: '.', required: true }),
+    targets: command_1.flags.string({char: 't', description: 'comma-separated targets to pack (e.g.: win32-x86,win32-x64)'}),
 };
diff --git a/node_modules/@oclif/dev-cli/lib/tarballs/build.js b/node_modules/@oclif/dev-cli/lib/tarballs/build.js
index c6bd245..1718902 100644
--- a/node_modules/@oclif/dev-cli/lib/tarballs/build.js
+++ b/node_modules/@oclif/dev-cli/lib/tarballs/build.js
@@ -18,8 +18,9 @@ const pack = async (from, to) => {
     qq.cd(prevCwd);
 };
 async function build(c, options = {}) {
-    const { xz, config } = c;
+    const { xz, config, tmp } = c;
     const prevCwd = qq.cwd();
+    console.error(`[debug] [patched @oclif/dev-cli] cwd="${prevCwd}"\n c.root="${c.root}" c.workspace()="${c.workspace()}"`);
     const packCLI = async () => {
         const stdout = await qq.x.stdout('npm', ['pack', '--unsafe-perm'], { cwd: c.root });
         return path.join(c.root, stdout.split('\n').pop());
@@ -35,6 +36,13 @@ async function build(c, options = {}) {
         for (const f of await qq.ls('package', { fullpath: true }))
             await qq.mv(f, '.');
         await qq.rm('package', tarball, 'bin/run.cmd');
+        // rename the original balena-cli ./bin/balena entry point for oclif compatibility
+        await qq.mv('bin/balena', 'bin/run');
+        // The oclif installers are a production installation, while the source
+        // `bin` folder may contain a `.fast-boot.json` file of a dev installation.
+        // This has previously led to issues preventing the CLI from starting, so
+        // delete `.fast-boot.json` (if any) from the destination folder.
+        await qq.rm('bin/.fast-boot.json');
     };
     const updatePJSON = async () => {
         qq.cd(c.workspace());
@@ -46,21 +54,27 @@ async function build(c, options = {}) {
         await qq.writeJSON('package.json', pjson);
     };
     const addDependencies = async () => {
-        qq.cd(c.workspace());
-        const yarnRoot = findYarnWorkspaceRoot(c.root) || c.root;
-        const yarn = await qq.exists([yarnRoot, 'yarn.lock']);
-        if (yarn) {
-            await qq.cp([yarnRoot, 'yarn.lock'], '.');
-            await qq.x('yarn --no-progress --production --non-interactive');
-        }
-        else {
-            let lockpath = qq.join(c.root, 'package-lock.json');
-            if (!await qq.exists(lockpath)) {
-                lockpath = qq.join(c.root, 'npm-shrinkwrap.json');
-            }
-            await qq.cp(lockpath, '.');
-            await qq.x('npm install --production');
-        }
+        const ws = c.workspace();
+        qq.cd(ws);
+        console.error(`[debug] copying node_modules to "${ws}"`)
+        await qq.cp(path.join(c.root, 'node_modules'), ws);
+        console.error(`[debug] running "npm prune --production" in "${ws}"`);
+        await qq.x('npm prune --production');
+        console.error(`[debug] done`);
+        // const yarnRoot = findYarnWorkspaceRoot(c.root) || c.root;
+        // const yarn = await qq.exists([yarnRoot, 'yarn.lock']);
+        // if (yarn) {
+        //     await qq.cp([yarnRoot, 'yarn.lock'], '.');
+        //     await qq.x('yarn --no-progress --production --non-interactive');
+        // }
+        // else {
+        //     let lockpath = qq.join(c.root, 'package-lock.json');
+        //     if (!await qq.exists(lockpath)) {
+        //         lockpath = qq.join(c.root, 'npm-shrinkwrap.json');
+        //     }
+        //     await qq.cp(lockpath, '.');
+        //     await qq.x('npm install --production');
+        // }
     };
     const buildTarget = async (target) => {
         const workspace = c.workspace(target);
@@ -74,7 +88,8 @@ async function build(c, options = {}) {
             output: path.join(workspace, 'bin', 'node'),
             platform: target.platform,
             arch: target.arch,
-            tmp: qq.join(config.root, 'tmp'),
+            tmp,
+            projectRootPath: c.root,
         });
         if (options.pack === false)
             return;
diff --git a/node_modules/@oclif/dev-cli/lib/tarballs/config.js b/node_modules/@oclif/dev-cli/lib/tarballs/config.js
index 9754a6b..68ef6b7 100644
--- a/node_modules/@oclif/dev-cli/lib/tarballs/config.js
+++ b/node_modules/@oclif/dev-cli/lib/tarballs/config.js
@@ -17,7 +17,10 @@ function gitSha(cwd, options = {}) {
 }
 exports.gitSha = gitSha;
 async function Tmp(config) {
-    const tmp = path.join(config.root, 'tmp');
+    const tmp = process.env.BUILD_TMP
+        ? path.join(process.env.BUILD_TMP, 'oclif')
+        : path.join(config.root, 'tmp');
+    console.error(`[debug] @oclif/dev-cli tmp="${tmp}"`);
     await qq.mkdirp(tmp);
     return tmp;
 }
@@ -44,7 +47,7 @@ async function buildConfig(root, options = {}) {
         s3Config: updateConfig.s3,
         nodeVersion: updateConfig.node.version || process.versions.node,
         workspace(target) {
-            const base = qq.join(config.root, 'tmp');
+            const base = tmp;
             if (target && target.platform)
                 return qq.join(base, [target.platform, target.arch].join('-'), config.s3Key('baseDir', target));
             return qq.join(base, config.s3Key('baseDir', target));
diff --git a/node_modules/@oclif/dev-cli/lib/util.js b/node_modules/@oclif/dev-cli/lib/util.js
index b3d48b7..d2bc804 100644
--- a/node_modules/@oclif/dev-cli/lib/util.js
+++ b/node_modules/@oclif/dev-cli/lib/util.js
@@ -40,3 +40,19 @@ function sortBy(arr, fn) {
 }
 exports.sortBy = sortBy;
 exports.template = (context) => (t) => _.template(t || '')(context);
+
+const { isCygwin, isMinGW, isMSYS2 } = require('qqjs');
+
+function fixPath(badPath) {
+    console.log(`fixPath MSYSTEM=${process.env.MSYSTEM} OSTYPE=${process.env.OSTYPE} isMSYS2=${isMSYS2} isMingGW=${isMinGW} isCygwin=${isCygwin}`);
+    // 'c:\myfolder' -> '/c/myfolder' or '/cygdrive/c/myfolder'
+    let fixed = badPath.replace(/\\/g, '/');
+    if (isMSYS2 || isMinGW) {
+        fixed = fixed.replace(/^([a-zA-Z]):/, '/$1');
+    } else if (isCygwin) {
+        fixed = fixed.replace(/^([a-zA-Z]):/, '/cygdrive/$1');
+    }
+    console.log(`[patched @oclif/dev-cli] fixPath before="${badPath}" after="${fixed}"`);
+    return fixed;
+}
+exports.fixPath = fixPath;
